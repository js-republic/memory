{"version":3,"sources":["store/reducers/reducer.tsx","store/actions/actions.tsx","store/store.tsx","components/nav/nav.tsx","components/form/form.tsx","components/modal/modal.tsx","components/toolbar/toolbar.tsx","components/card-item/card-item.tsx","components/card-list/card-list.tsx","components/game/game.tsx","components/table/table.tsx","components/stats/stats.tsx","components/header/header.tsx","components/footer/footer.tsx","components/app.tsx","serviceWorker.js","index.tsx"],"names":["initialState","users","sortUsers","array","map","a","guesses","filter","i","indexOf","b","sort","reduce","c","rating","saveUsers","localStorage","setItem","JSON","stringify","reducer","state","action","type","parse","getItem","user","payload","matchedUser","find","curUser","name","index","findIndex","splice","store","createStore","Nav","className","to","Form","props","baseState","handleChange","bind","handleSubmit","value","disabled","event","target","trim","this","setState","preventDefault","handleUsers","toLocaleLowerCase","onSubmit","autoFocus","placeholder","onChange","React","Component","Modal","isOpen","title","onClick","toggleModal","src","alt","isText","text","children","Toolbar","handleClick","restartGame","pairs","CardItem","feedback","handleCard","card","imgUrl","contentUrl","CardList","curPair","matchedCards","prevProps","cards","includes","length","id","resetCurPair","handleProgress","setTimeout","key","getFeedback","href","rel","Game","generateNewPairs","selectedCards","Lodash","shuffle","slice","dispatch","date","Date","toLocaleString","history","push","withRouter","Table","Stats","unsubscribe","subscribe","forceUpdate","getState","Header","Footer","fetch","then","data","json","App","loadCards","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d548df41.chunk.js","sourcesContent":["import { DELETE_USERS, LOAD_USERS, UPDATE_USER } from '../actions/actions';\nimport User from '../../models/user';\n\ninterface InitialState {\n  users: User[];\n}\n\nconst initialState: InitialState = {\n  users: [],\n};\n\nfunction reducer(state = initialState, action: any) {\n  switch (action.type) {\n    case LOAD_USERS:\n      return { ...state, users: JSON.parse(localStorage.getItem('::memory::users') || '[]') };\n\n    case UPDATE_USER: {\n      const users = [...state.users];\n      const user = action.payload.user;\n\n      const matchedUser = users.find((curUser) => curUser.name === user.name);\n      const index = users.findIndex((curUser) => curUser.name === user.name);\n\n      if (matchedUser) {\n        users.splice(index, 1, user);\n        return { ...state, users: saveUsers(sortUsers(users)) };\n      } else {\n        return { ...state, users: saveUsers(sortUsers([...users, user])) };\n      }\n    }\n\n    case DELETE_USERS:\n      return { ...state, users: saveUsers([]) };\n\n    default:\n      return state;\n  }\n}\n\nfunction sortUsers(users: User[]): User[] {\n  var array = users.map((a) => a.guesses);\n  array = array.filter((a, i) => array.indexOf(a) === i);\n\n  return array\n    .map((a) => users.filter((b) => b.guesses === a))\n    .sort((a, b) => a[0].guesses - b[0].guesses)\n    .reduce((a, b, i) => [...a, ...b.map((c) => ({ ...c, rating: i + 1 }))], []);\n}\n\nfunction saveUsers(users: User[]): User[] {\n  localStorage.setItem('::memory::users', JSON.stringify(users));\n  return users;\n}\n\nexport default reducer;\n","import User from '../../models/user';\n\nexport const LOAD_USERS = 'LOAD_USERS';\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const DELETE_USERS = 'DELETE_USERS';\n\nexport function loadUsers() {\n  return {\n    type: LOAD_USERS,\n    payload: {},\n  };\n}\n\nexport function updateUser(user: User) {\n  return {\n    type: UPDATE_USER,\n    payload: { user },\n  };\n}\n\nexport function deleteUsers() {\n  return {\n    type: DELETE_USERS,\n    payload: {},\n  };\n}\n","import { createStore } from 'redux';\nimport reducer from './reducers/reducer';\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './nav.scss';\n\nfunction Nav() {\n  return (\n    <nav className=\"nav\">\n      <NavLink className=\"nav-link\" to=\"/game\">\n        Game\n      </NavLink>\n      <NavLink className=\"nav-link\" to=\"/stats\">\n        Stats\n      </NavLink>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\n\nimport './form.scss';\n\ntype Props = { handleUsers: (name: string) => void };\ntype State = { value: string; disabled: boolean };\n\nclass Form extends React.Component<Props, State> {\n  baseState: State;\n\n  constructor(props: Props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.baseState = this.state = { value: '', disabled: true };\n  }\n\n  handleChange(event: any) {\n    const value = event.target.value.trim();\n    const disabled = value ? false : true;\n    this.setState({ value, disabled });\n  }\n\n  handleSubmit(event: any) {\n    event.preventDefault();\n    this.props.handleUsers(this.state.value.toLocaleLowerCase());\n    this.setState(this.baseState);\n  }\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <input className=\"form-field\" type=\"text\" autoFocus placeholder=\"Name\" value={this.state.value} onChange={this.handleChange} />\n        <button className=\"form-button\" type=\"submit\" disabled={this.state.disabled}>\n          Save\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { ReactNode } from 'react';\n\nimport './modal.scss';\n\ntype Props = {\n  text: string;\n  title: string;\n  isText: boolean;\n  isOpen: boolean;\n  children: ReactNode;\n  toggleModal: () => void;\n};\n\nfunction Modal(props: Props) {\n  function getClass() {\n    return props.isOpen ? 'show' : 'hide';\n  }\n\n  return (\n    <div className={`modal ${getClass()}`}>\n      <div className=\"modal-container\">\n        <div className=\"modal-header\">\n          <span className=\"modal-title\">{props.title}</span>\n          <button className=\"modal-button\" type=\"button\" onClick={() => props.toggleModal()}>\n            <img className=\"modal-img\" src=\"assets/close.png\" alt=\"\" />\n          </button>\n        </div>\n        <div className=\"modal-content\">\n          {props.isText && <p className=\"modal-text\">{props.text}</p>}\n          {props.children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;\n","import React from 'react';\n\nimport './toolbar.scss';\n\ntype Props = { pairs: number; guesses: number; restartGame: () => void };\n\nclass Toolbar extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.props.restartGame();\n  }\n\n  render() {\n    return (\n      <div className=\"toolbar\">\n        <div className=\"toolbar-counter\">\n          <div className=\"toolbar-counter-container\">\n            <span className=\"toolbar-counter-value\">{this.props.guesses}</span>\n            <span className=\"toolbar-counter-legend\">{this.props.guesses > 1 ? 'guesses' : 'guess'}</span>\n          </div>\n          <div className=\"toolbar-counter-container\">\n            <span className=\"toolbar-counter-value\">{this.props.pairs}</span>\n            <span className=\"toolbar-counter-legend\">/8 pairs</span>\n          </div>\n        </div>\n        <button className=\"toolbar-button\" type=\"button\" onClick={this.handleClick}>\n          Restart\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Toolbar;\n","import React from 'react';\nimport Card from '../../models/card';\n\nimport './card-item.scss';\n\ntype Props = {\n  card: Card;\n  feedback: string;\n  handleCard: (card: Card) => void;\n  toggleModal: (imgUrl: string) => void;\n};\n\nfunction CardItem(props: Props) {\n  return (\n    <li className={`card-item ${props.feedback}`} onClick={() => props.handleCard(props.card)}>\n      <div className=\"card-item-front\">\n        <img className=\"card-item-img\" src={props.card.imgUrl} alt=\"\" />\n        <button className=\"card-item-button\" onClick={() => props.toggleModal(props.card.contentUrl)}>\n          more\n        </button>\n      </div>\n      <img className=\"card-item-back\" src=\"assets/back.png\" alt=\"\" />\n    </li>\n  );\n}\n\nexport default CardItem;\n","import React from 'react';\nimport Card from '../../models/card';\nimport CardItem from '../card-item/card-item';\nimport Modal from '../modal/modal';\n\nimport './card-list.scss';\n\ntype Props = { cards: Card[]; handleProgress: (matchedCards: Card[]) => void };\ntype State = { curPair: Card[]; matchedCards: Card[]; isOpen: boolean; imgUrl: string };\n\nclass CardList extends React.Component<Props, State> {\n  baseState: State;\n\n  constructor(props: Props) {\n    super(props);\n    this.handleCard = this.handleCard.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.baseState = this.state = { curPair: [], matchedCards: [], isOpen: false, imgUrl: '' };\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.cards !== this.props.cards) {\n      this.setState(this.baseState);\n    }\n  }\n\n  handleCard(card: Card) {\n    const curPair = [...this.state.curPair, card];\n    var { matchedCards } = this.state;\n\n    if (matchedCards.includes(card) || curPair[0] === curPair[1]) {\n      return;\n    }\n\n    if (curPair.length === 1) {\n      this.setState({ curPair });\n    }\n\n    if (curPair.length === 2 && curPair[0].id === curPair[1].id) {\n      matchedCards = [...matchedCards, curPair[0], curPair[1]];\n      this.setState({ curPair, matchedCards });\n      this.resetCurPair();\n      this.props.handleProgress(matchedCards);\n    }\n\n    if (curPair.length === 2 && curPair[0].id !== curPair[1].id) {\n      this.setState({ curPair });\n      this.resetCurPair();\n      this.props.handleProgress(matchedCards);\n    }\n  }\n\n  resetCurPair() {\n    setTimeout(() => this.setState({ curPair: [] }), 750);\n  }\n\n  getFeedback(card: Card): string {\n    const { curPair, matchedCards } = this.state;\n    return curPair.includes(card) || matchedCards.includes(card) ? 'visible' : 'hidden';\n  }\n\n  toggleModal(imgUrl = '') {\n    this.setState({ isOpen: !this.state.isOpen, imgUrl });\n  }\n\n  render() {\n    return (\n      <ul className=\"card-list\">\n        {this.props.cards.map((card, index) => (\n          <CardItem key={index} card={card} feedback={this.getFeedback(card)} handleCard={this.handleCard} toggleModal={this.toggleModal} />\n        ))}\n        <Modal title=\"UX-Card details\" text=\"\" isText={false} isOpen={this.state.isOpen} toggleModal={this.toggleModal}>\n          <a href=\"https://www.ux-republic.com/nos-offres/\" target=\"_blank\" rel=\"noreferrer noopener\">\n            <img src={this.state.imgUrl} alt=\"\" />\n          </a>\n        </Modal>\n      </ul>\n    );\n  }\n}\n\nexport default CardList;\n","import React from 'react';\nimport Lodash from 'lodash';\nimport store from '../../store/store';\nimport { updateUser } from '../../store/actions/actions';\nimport { withRouter } from 'react-router';\n\nimport Card from '../../models/card';\n\nimport './game.scss';\n\nimport Form from '../form/form';\nimport Modal from '../modal/modal';\nimport Toolbar from '../toolbar/toolbar';\nimport CardList from '../card-list/card-list';\n\ntype Props = {\n  match: any;\n  history: any;\n  location: any;\n  cards: Card[];\n};\n\ntype State = {\n  cards: Card[];\n  pairs: number;\n  guesses: number;\n  isOpen: boolean;\n};\n\nclass Game extends React.Component<Props, State> {\n  state: State = {\n    cards: this.generateNewPairs(this.props.cards),\n    pairs: 0,\n    guesses: 0,\n    isOpen: false,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.restartGame = this.restartGame.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.handleUsers = this.handleUsers.bind(this);\n    this.handleProgress = this.handleProgress.bind(this);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.cards !== this.props.cards) {\n      this.setState({ cards: this.generateNewPairs(this.props.cards) });\n    }\n  }\n\n  generateNewPairs(cards: Card[]): Card[] {\n    const selectedCards = Lodash.shuffle(cards).slice(0, 8);\n    return Lodash.shuffle(selectedCards.reduce<Card[]>((cards, card) => [...cards, { ...card }, { ...card }], []));\n  }\n\n  restartGame() {\n    this.setState({ cards: this.generateNewPairs(this.props.cards), guesses: 0, pairs: 0, isOpen: false });\n  }\n\n  toggleModal() {\n    this.setState({ isOpen: !this.state.isOpen });\n  }\n\n  handleProgress(matchedCards: Card[]) {\n    this.setState({ guesses: this.state.guesses + 1, pairs: matchedCards.length / 2 });\n    if (this.state.cards.length === matchedCards.length) {\n      this.toggleModal();\n    }\n  }\n\n  handleUsers(name: string) {\n    const { guesses } = this.state;\n    store.dispatch(updateUser({ name, date: new Date().toLocaleString(), guesses, rating: 0 }));\n    this.setState({ isOpen: false });\n    this.props.history.push('/stats');\n  }\n\n  render() {\n    return (\n      <section className=\"game\">\n        <Toolbar pairs={this.state.pairs} guesses={this.state.guesses} restartGame={this.restartGame} />\n\n        <CardList cards={this.state.cards} handleProgress={this.handleProgress} />\n\n        <Modal title=\"Save your game\" text=\"Congratulations !\" isText={true} isOpen={this.state.isOpen} toggleModal={this.toggleModal}>\n          <Form handleUsers={this.handleUsers} />\n        </Modal>\n      </section>\n    );\n  }\n}\n\nexport default withRouter(Game);\n","import React from 'react';\nimport User from '../../models/user';\n\nimport './table.scss';\n\ntype Props = { users: User[]; handleClick: () => void };\n\nfunction Table(props: Props) {\n  return (\n    <table className=\"table\">\n      <thead className=\"table-header\">\n        <tr className=\"table-row\">\n          <th className=\"table-cell\">Name</th>\n          <th className=\"table-cell\">Rating</th>\n          <th className=\"table-cell\">Guesses</th>\n          <th className=\"table-cell\">Date</th>\n          <th className=\"table-cell\">\n            <button className=\"table-button\" onClick={props.handleClick}>\n              Clear\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody className=\"table-body\">\n        {props.users.map((user, index) => (\n          <tr className=\"table-row\" key={index}>\n            <td className=\"table-cell\">{user.name}</td>\n            <td className=\"table-cell\">{user.rating}</td>\n            <td className=\"table-cell\">{user.guesses}</td>\n            <td className=\"table-cell\">{user.date}</td>\n            <td className=\"table-cell\"></td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import React from 'react';\nimport store from '../../store/store';\nimport { deleteUsers } from '../../store/actions/actions';\nimport { NavLink } from 'react-router-dom';\n\nimport User from '../../models/user';\nimport Table from '../table/table';\n\nimport './stats.scss';\n\nclass Stats extends React.Component {\n  unsubscribe: any;\n\n  componentDidMount() {\n    this.unsubscribe = store.subscribe(() => this.forceUpdate());\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  handleClick() {\n    store.dispatch(deleteUsers());\n  }\n\n  render() {\n    const users: User[] = store.getState().users;\n\n    return (\n      <section className=\"stats\">\n        {users.length === 0 ? (\n          <NavLink className=\"stats-link\" to=\"/game\">\n            Start\n          </NavLink>\n        ) : (\n          <Table users={users} handleClick={this.handleClick} />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default Stats;\n","import React, { ReactNode } from 'react';\n\nimport './header.scss';\n\ntype Props = { children: ReactNode };\n\nfunction Header(props: Props) {\n  return (\n    <header className=\"header\">\n      <h1 className=\"header-title\">\n        <span className=\"header-name\">UX</span>\n        <span className=\"header-game\">memory</span>\n      </h1>\n      {props.children}\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nimport './footer.scss';\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <a href=\"https://www.ux-republic.com/\" target=\"_blank\" rel=\"noreferrer noopener\">\n        <img className=\"footer-logo\" src=\"assets/logo.png\" alt=\"Logo UX-Republic\" />\n      </a>\n      <span>\n        by\n        <a className=\"footer-author\" href=\"https://fr.linkedin.com/in/nlsbienaime\" target=\"_blank\" rel=\"noreferrer noopener\">\n          Nicolas Bienaime\n        </a>\n      </span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport store from '../store/store';\nimport { loadUsers } from '../store/actions/actions';\nimport { HashRouter, Redirect, Route } from 'react-router-dom';\n\nimport './app.scss';\n\nimport Card from '../models/card';\n\nimport Nav from './nav/nav';\nimport Game from './game/game';\nimport Stats from './stats/stats';\nimport Header from './header/header';\nimport Footer from './footer/footer';\n\nasync function loadCards(): Promise<Card[]> {\n  const cards: Card[] = await fetch('data/cards.json').then((data) => data.json());\n  return cards;\n}\n\ntype State = {\n  cards: Card[];\n};\n\nclass App extends React.Component {\n  state: State = {\n    cards: [],\n  };\n\n  componentDidMount() {\n    loadCards().then((cards: Card[]) => this.setState({ cards }));\n    store.dispatch(loadUsers());\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <HashRouter>\n          <Header>\n            <Nav />\n          </Header>\n          <Route exact path=\"/\" render={() => <Redirect to=\"/game\" />} />\n          <Route exact path=\"/game\" render={() => <Game cards={this.state.cards} />} />\n          <Route exact path=\"/stats\" render={() => <Stats />} />\n          <Footer />\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}